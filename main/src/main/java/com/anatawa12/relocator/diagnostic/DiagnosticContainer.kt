// this file is generated by 'DiagnosticContainer.generator.kts'
package com.anatawa12.relocator.diagnostic

@Suppress("UNCHECKED_CAST")
open class DiagnosticContainer {
    private val diagnostics = hashMapOf<String, BasicDiagnosticType>()

    protected fun add(diagnosticType: BasicDiagnosticType) {
        if (diagnostics.putIfAbsent(diagnosticType.id, diagnosticType) != null)
            throw IllegalArgumentException("Diagnostic with id '${diagnosticType.id}' already exists")
    }

    fun warning(id: String, message: String) = DiagnosticType0.new(id, DiagnosticKind.Warning, message).apply(::add)
    fun error(id: String, message: String) = DiagnosticType0.new(id, DiagnosticKind.Error, message).apply(::add)

    // begin loop generated code
    fun <T0> warning(
        id: String,
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        message: MessageBuilder1<T0>,
    ) = DiagnosticType1.new(id, DiagnosticKind.Warning, message).apply(::add)

    fun <T0> error(
        id: String,
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        message: MessageBuilder1<T0>,
    ) = DiagnosticType1.new(id, DiagnosticKind.Error, message).apply(::add)

    fun <T0, T1> warning(
        id: String,
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        message: MessageBuilder2<T0, T1>,
    ) = DiagnosticType2.new(id, DiagnosticKind.Warning, message).apply(::add)

    fun <T0, T1> error(
        id: String,
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        message: MessageBuilder2<T0, T1>,
    ) = DiagnosticType2.new(id, DiagnosticKind.Error, message).apply(::add)

    fun <T0, T1, T2> warning(
        id: String,
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        @Suppress("UNUSED_PARAMETER") type2: DiagnosticValueType<T2>,
        message: MessageBuilder3<T0, T1, T2>,
    ) = DiagnosticType3.new(id, DiagnosticKind.Warning, message).apply(::add)

    fun <T0, T1, T2> error(
        id: String,
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        @Suppress("UNUSED_PARAMETER") type2: DiagnosticValueType<T2>,
        message: MessageBuilder3<T0, T1, T2>,
    ) = DiagnosticType3.new(id, DiagnosticKind.Error, message).apply(::add)

    fun <T0, T1, T2, T3> warning(
        id: String,
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        @Suppress("UNUSED_PARAMETER") type2: DiagnosticValueType<T2>,
        @Suppress("UNUSED_PARAMETER") type3: DiagnosticValueType<T3>,
        message: MessageBuilder4<T0, T1, T2, T3>,
    ) = DiagnosticType4.new(id, DiagnosticKind.Warning, message).apply(::add)

    fun <T0, T1, T2, T3> error(
        id: String,
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        @Suppress("UNUSED_PARAMETER") type2: DiagnosticValueType<T2>,
        @Suppress("UNUSED_PARAMETER") type3: DiagnosticValueType<T3>,
        message: MessageBuilder4<T0, T1, T2, T3>,
    ) = DiagnosticType4.new(id, DiagnosticKind.Error, message).apply(::add)

    // end loop generated code
    companion object {
        @JvmStatic val String = DiagnosticValueType.String
        @JvmStatic val Int = DiagnosticValueType.Int
    }
}

fun interface MessageBuilder1<T0>{
    fun build(
        type0: T0,
    ): String
}

fun interface MessageBuilder2<T0, T1>{
    fun build(
        type0: T0,
        type1: T1,
    ): String
}

fun interface MessageBuilder3<T0, T1, T2>{
    fun build(
        type0: T0,
        type1: T1,
        type2: T2,
    ): String
}

fun interface MessageBuilder4<T0, T1, T2, T3>{
    fun build(
        type0: T0,
        type1: T1,
        type2: T2,
        type3: T3,
    ): String
}

