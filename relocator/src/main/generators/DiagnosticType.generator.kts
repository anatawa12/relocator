println("// this file is generated by 'DiagnosticType.generator.kts'")
println("package com.anatawa12.relocator.diagnostic")
println("")
println("/*")
println(" * The class which represents a type of diagnostic.")
println(" *")
println(" * this class is not intended for extend by external class.")
println(" */")
println("abstract class BasicDiagnosticType internal constructor(")
println("    val id: String,")
println("    val kind: DiagnosticKind,")
println("    protected val render: Any?,")
println(") {")
println("    internal abstract fun render(values: Array<Any?>): String")
println("}")
println("")
println("class DiagnosticType0 private constructor(")
println("    name: String,")
println("    kind: DiagnosticKind,")
println("    message: String,")
println("): BasicDiagnosticType(name, kind, message) {")
println("    @JvmName(\"create\")")
println("    operator fun invoke(location: Location) = Diagnostic(this, location, arrayOf())")
println("    override fun render(values: Array<Any?>): String = render as String")
println()
println("    companion object {")
println("        // the constructor wrapper/bridge to protect from calling this method from java")
println("        @JvmStatic @JvmName(\"new\") internal fun new(")
println("            name: String,")
println("            kind: DiagnosticKind,")
println("            message: String,")
println("        ) = DiagnosticType0(name, kind, message)")
println("    }")
println("}")
println("")
println("// begin loop generated code")

fun generate(count: Int) {
    val range = 0 until count
    val types = range.joinToString(", ") { "T$it" }

    println("class DiagnosticType$count<$types> private constructor(")
    println("    name: String,")
    println("    kind: DiagnosticKind,")
    println("    message: MessageBuilder$count<$types>,")
    println("): BasicDiagnosticType(name, kind, message) {")
    println("    @JvmName(\"create\")")
    println("    operator fun invoke(")
    for (i in range)
        println("        value$i: T$i,")
    println("        location: Location,")
    println("    ) = Diagnostic(this, location, arrayOf(")
    for (i in range)
        println("        value$i,")
    println("    ))")
    println("")
    println("    @Suppress(\"UNCHECKED_CAST\")")
    println("    override fun render(values: Array<Any?>): String = (render as MessageBuilder$count<$types>).build(")
    for (i in range)
        println("        values[$i] as T$i,")
    println("    )")
    println()
    println("    companion object {")
    println("        // the constructor wrapper/bridge to protect from calling this method from java")
    println("        @JvmStatic @JvmName(\"new\") internal fun <$types> new(")
    println("            name: String,")
    println("            kind: DiagnosticKind,")
    println("            message: MessageBuilder$count<$types>,")
    println("        ) = DiagnosticType$count(name, kind, message)")
    println("    }")
    println("}")
    println("")
}

for (i in 1..4) {
    generate(i)
}

println("// end loop generated code")
println("")
