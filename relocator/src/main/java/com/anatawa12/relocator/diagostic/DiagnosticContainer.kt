// this file is generated by 'DiagnosticContainer.generator.kts'
package com.anatawa12.relocator.diagostic

import kotlin.reflect.KProperty

@Suppress("UNCHECKED_CAST")
open class DiagnosticContainer {
    private val diagnostics = hashMapOf<String, BasicDiagnosticType>()

    protected operator fun <T : BasicDiagnosticType> DiagnosticBuilder<T>.provideDelegate(thisRef: DiagnosticContainer, prop: KProperty<*>) =
        create(prop.name).apply(::add)

    protected operator fun <T : BasicDiagnosticType> T.getValue(thisRef: DiagnosticContainer, prop: KProperty<*>) = this

    protected fun add(diagnosticType: BasicDiagnosticType) {
        if (diagnostics.putIfAbsent(diagnosticType.id, diagnosticType) != null)
            throw IllegalArgumentException("Diagnostic with id '${diagnosticType.id}' already exists")
    }

    fun warning(message: String) = DiagnosticBuilder(DiagnosticKind.Warning, message, ::DiagnosticType0)
    fun error(message: String) = DiagnosticBuilder(DiagnosticKind.Error, message, ::DiagnosticType0)

    // begin loop generated code
    fun <T0> warning(
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        message: (T0) -> String,
    ) = DiagnosticBuilder<DiagnosticType1<T0>>(DiagnosticKind.Warning, message, ::DiagnosticType1)

    fun <T0> error(
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        message: (T0) -> String,
    ) = DiagnosticBuilder<DiagnosticType1<T0>>(DiagnosticKind.Error, message, ::DiagnosticType1)

    fun <T0, T1> warning(
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        message: (T0, T1) -> String,
    ) = DiagnosticBuilder<DiagnosticType2<T0, T1>>(DiagnosticKind.Warning, message, ::DiagnosticType2)

    fun <T0, T1> error(
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        message: (T0, T1) -> String,
    ) = DiagnosticBuilder<DiagnosticType2<T0, T1>>(DiagnosticKind.Error, message, ::DiagnosticType2)

    fun <T0, T1, T2> warning(
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        @Suppress("UNUSED_PARAMETER") type2: DiagnosticValueType<T2>,
        message: (T0, T1, T2) -> String,
    ) = DiagnosticBuilder<DiagnosticType3<T0, T1, T2>>(DiagnosticKind.Warning, message, ::DiagnosticType3)

    fun <T0, T1, T2> error(
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        @Suppress("UNUSED_PARAMETER") type2: DiagnosticValueType<T2>,
        message: (T0, T1, T2) -> String,
    ) = DiagnosticBuilder<DiagnosticType3<T0, T1, T2>>(DiagnosticKind.Error, message, ::DiagnosticType3)

    fun <T0, T1, T2, T3> warning(
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        @Suppress("UNUSED_PARAMETER") type2: DiagnosticValueType<T2>,
        @Suppress("UNUSED_PARAMETER") type3: DiagnosticValueType<T3>,
        message: (T0, T1, T2, T3) -> String,
    ) = DiagnosticBuilder<DiagnosticType4<T0, T1, T2, T3>>(DiagnosticKind.Warning, message, ::DiagnosticType4)

    fun <T0, T1, T2, T3> error(
        @Suppress("UNUSED_PARAMETER") type0: DiagnosticValueType<T0>,
        @Suppress("UNUSED_PARAMETER") type1: DiagnosticValueType<T1>,
        @Suppress("UNUSED_PARAMETER") type2: DiagnosticValueType<T2>,
        @Suppress("UNUSED_PARAMETER") type3: DiagnosticValueType<T3>,
        message: (T0, T1, T2, T3) -> String,
    ) = DiagnosticBuilder<DiagnosticType4<T0, T1, T2, T3>>(DiagnosticKind.Error, message, ::DiagnosticType4)

    // end loop generated code
    companion object {
        @JvmStatic val String = DiagnosticValueType.String
        @JvmStatic val Int = DiagnosticValueType.Int
    }
}

