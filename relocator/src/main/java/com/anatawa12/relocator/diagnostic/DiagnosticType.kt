// this file is generated by 'DiagnosticType.generator.kts'
package com.anatawa12.relocator.diagnostic

sealed class BasicDiagnosticType constructor(val id: String, builder: DiagnosticBuilder<*>) {
    val kind: DiagnosticKind = builder.kind
    protected val render: Any? = builder.render

    abstract fun render(values: Array<Any?>): String
}

class DiagnosticType0(
    name: String,
    builder: DiagnosticBuilder<*>,
): BasicDiagnosticType(name, builder) {
    @JvmName("create")
    operator fun invoke(location: Location) = Diagnostic(this, location, arrayOf())
    override fun render(values: Array<Any?>): String = render as String
}

// begin loop generated code
class DiagnosticType1<T0>(
    name: String,
    builder: DiagnosticBuilder<DiagnosticType1<T0>>,
): BasicDiagnosticType(name, builder) {
    @JvmName("create")
    operator fun invoke(
        value0: T0,
        location: Location,
    ) = Diagnostic(this, location, arrayOf(
        value0,
    ))

    @Suppress("UNCHECKED_CAST")
    override fun render(values: Array<Any?>): String = (render as (T0) -> String)(
        values[0] as T0,
    )
}

class DiagnosticType2<T0, T1>(
    name: String,
    builder: DiagnosticBuilder<DiagnosticType2<T0, T1>>,
): BasicDiagnosticType(name, builder) {
    @JvmName("create")
    operator fun invoke(
        value0: T0,
        value1: T1,
        location: Location,
    ) = Diagnostic(this, location, arrayOf(
        value0,
        value1,
    ))

    @Suppress("UNCHECKED_CAST")
    override fun render(values: Array<Any?>): String = (render as (T0, T1) -> String)(
        values[0] as T0,
        values[1] as T1,
    )
}

class DiagnosticType3<T0, T1, T2>(
    name: String,
    builder: DiagnosticBuilder<DiagnosticType3<T0, T1, T2>>,
): BasicDiagnosticType(name, builder) {
    @JvmName("create")
    operator fun invoke(
        value0: T0,
        value1: T1,
        value2: T2,
        location: Location,
    ) = Diagnostic(this, location, arrayOf(
        value0,
        value1,
        value2,
    ))

    @Suppress("UNCHECKED_CAST")
    override fun render(values: Array<Any?>): String = (render as (T0, T1, T2) -> String)(
        values[0] as T0,
        values[1] as T1,
        values[2] as T2,
    )
}

class DiagnosticType4<T0, T1, T2, T3>(
    name: String,
    builder: DiagnosticBuilder<DiagnosticType4<T0, T1, T2, T3>>,
): BasicDiagnosticType(name, builder) {
    @JvmName("create")
    operator fun invoke(
        value0: T0,
        value1: T1,
        value2: T2,
        value3: T3,
        location: Location,
    ) = Diagnostic(this, location, arrayOf(
        value0,
        value1,
        value2,
        value3,
    ))

    @Suppress("UNCHECKED_CAST")
    override fun render(values: Array<Any?>): String = (render as (T0, T1, T2, T3) -> String)(
        values[0] as T0,
        values[1] as T1,
        values[2] as T2,
        values[3] as T3,
    )
}

// end loop generated code

